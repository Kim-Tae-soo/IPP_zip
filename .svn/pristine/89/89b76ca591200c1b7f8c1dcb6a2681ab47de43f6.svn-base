/*
 * Copyright 2008-2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package egovframework.example.sample.web;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.List;
import java.util.UUID;

import org.apache.commons.io.FilenameUtils;
import org.egovframe.rte.fdl.property.EgovPropertyService;
import org.egovframe.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springmodules.validation.commons.DefaultBeanValidator;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.FileCopyUtils;

import egovframework.example.sample.service.FileUploadService;
import egovframework.example.sample.service.KTS_EgovSampleService;
import egovframework.example.sample.service.KTS_SampleDefaultVO;
import egovframework.example.sample.service.KTS_SampleVO;
import egovframework.example.sample.service.*;

/**
 * @Class Name : EgovSampleController.java
 * @Description : EgovSample Controller Class
 * @Modification Information
 * @ @ 수정일 수정자 수정내용 @ --------- --------- ------------------------------- @
 *   2009.03.16 최초생성
 *
 * @author 개발프레임웍크 실행환경 개발팀
 * @since 2009. 03.16
 * @version 1.0
 * @see
 * 
 *      Copyright (C) by MOPAS All right reserved.
 */

@Controller
public class KTS_EgovSampleController {

	/** EgovSampleService */
	@Resource(name = "sampleService")
	private KTS_EgovSampleService sampleService;

	/** EgovPropertyService */
	@Resource(name = "propertiesService")
	protected EgovPropertyService propertiesService;

	/** Validator */
	@Resource(name = "beanValidator")
	protected DefaultBeanValidator beanValidator;

	/**
	 * 회원가입 페이지로 이동하는 핸들러 메서드
	 * 
	 * @return "KTS_sample/KTS_egovSampleRegister"
	 */
	@GetMapping("/register.do")
	public String registerView(Model model) {
		model.addAttribute("KTS_sampleVO", new KTS_SampleVO());
		return "KTS_sample/KTS_register";
	}

	/**
	 * 글 목록을 조회한다. (pageing)
	 * 
	 * @param searchVO - 조회할 정보가 담긴 SampleDefaultVO
	 * @param model
	 * @return "KTS_egovSampleList"
	 * @exception Exception
	 */
	@RequestMapping(value = "/KTS_egovSampleList.do")
	public String selectSampleList(@ModelAttribute("KTS_searchVO") KTS_SampleDefaultVO KTS_searchVO, ModelMap model)
			throws Exception {

		/** EgovPropertyService.sample */
		KTS_searchVO.setPageUnit(propertiesService.getInt("pageUnit"));
		KTS_searchVO.setPageSize(propertiesService.getInt("pageSize"));

		/** pageing setting */
		PaginationInfo paginationInfo = new PaginationInfo();
		paginationInfo.setCurrentPageNo(KTS_searchVO.getPageIndex());
		paginationInfo.setRecordCountPerPage(KTS_searchVO.getPageUnit());
		paginationInfo.setPageSize(KTS_searchVO.getPageSize());

		KTS_searchVO.setFirstIndex(paginationInfo.getFirstRecordIndex());
		KTS_searchVO.setLastIndex(paginationInfo.getLastRecordIndex());
		KTS_searchVO.setRecordCountPerPage(paginationInfo.getRecordCountPerPage());

		List<?> sampleList = sampleService.selectSampleList(KTS_searchVO);
		model.addAttribute("resultList", sampleList);

		int totCnt = sampleService.selectSampleListTotCnt(KTS_searchVO);
		paginationInfo.setTotalRecordCount(totCnt);
		model.addAttribute("paginationInfo", paginationInfo);

		return "KTS_sample/KTS_egovSampleList";
	}

	@Autowired
	private FileUploadService fileUploadService;

	@RequestMapping(value = "/addSampleView.do", method = RequestMethod.POST)
	public String addSampleView(@ModelAttribute("KTS_searchVO") KTS_SampleDefaultVO KTS_searchVO,
			KTS_SampleVO KTS_sampleVO, BindingResult bindingResult, Model model, SessionStatus status)
			throws Exception {

		// Server-Side Validation
		beanValidator.validate(KTS_sampleVO, bindingResult);

		if (bindingResult.hasErrors()) {
			model.addAttribute("KTS_sampleVO", KTS_sampleVO);
			return "KTS_sample/KTS_egovSampleRegister";
		}

		// File Upload Logic
		MultipartFile file = KTS_sampleVO.getUploadfile();
		if (file != null && !file.isEmpty()) {
			String uploadPath = "C:/uploads";

			try {
				String originalFilename = file.getOriginalFilename();
				String savedFilename = originalFilename; // 파일명 변경 없이 저장
				fileUploadService.uploadFile(file, uploadPath, savedFilename); // 파일명도 전달
				// 파일명 설정
				KTS_sampleVO.setFilename(originalFilename);
			} catch (Exception e) {
				// Handle the file upload error (e.g., logging, displaying an error message)
			}
		}

		sampleService.insertSample(KTS_sampleVO);
		status.setComplete();
		return "forward:/KTS_egovSampleList.do";
	}

	/**
	 * 글을 등록한다.
	 * 
	 * @param sampleVO - 등록할 정보가 담긴 VO
	 * @param searchVO - 목록 조회조건 정보가 담긴 VO
	 * @param status
	 * @return "forward:/KTS_egovSampleList.do"
	 * @exception Exception
	 */

	/**
	 * 글 상세보기 화면을 조회한다.
	 * 
	 * @param id       - 조회할 글 id
	 * @param searchVO - 목록 조회조건 정보가 담긴 VO
	 * @param model
	 * @return "KTS_egovSampleDetail"
	 * @exception Exception
	 */
	@RequestMapping("/viewSample.do")
	public String viewSample(@RequestParam("selectedId") String id,
			@ModelAttribute("KTS_searchVO") KTS_SampleDefaultVO KTS_searchVO, Model model) throws Exception {
		KTS_SampleVO KTS_sampleVO = new KTS_SampleVO();
		KTS_sampleVO.setId(id);
		KTS_sampleVO = selectSample(KTS_sampleVO, KTS_searchVO);
		model.addAttribute("KTS_sampleVO", KTS_sampleVO);
		return "KTS_sample/KTS_egovSampleDetail";
	}

	/*    *//**
			 * 파일 다운로드를 처리하는 핸들러 메서드
			 * 
			 * @param filename 다운로드할 파일명
			 * @return ResponseEntity with file content
			 * @throws IOException
			 *//*
				 * @RequestMapping(value = "/downloadFile.do", method = RequestMethod.GET)
				 * public ResponseEntity<byte[]> downloadFile(@RequestParam("filename") String
				 * filename) throws IOException { String uploadPath = "C:/uploads"; // 파일이 업로드된
				 * 디렉토리 경로
				 * 
				 * File file = new File(uploadPath, filename); byte[] fileContent =
				 * FileCopyUtils.copyToByteArray(file);
				 * 
				 * HttpHeaders headers = new HttpHeaders();
				 * headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
				 * headers.setContentDispositionFormData("attachment", filename);
				 * 
				 * return new ResponseEntity<>(fileContent, headers, HttpStatus.OK); }
				 */

	/**
	 * 글 수정화면을 조회한다.
	 * 
	 * @param id       - 수정할 글 id
	 * @param searchVO - 목록 조회조건 정보가 담긴 VO
	 * @param model
	 * @return "KTS_egovSampleRegister"
	 * @exception Exception
	 */
	@RequestMapping("/updateSampleView.do")
	public String updateSampleView(@RequestParam("selectedId") String id,
			@ModelAttribute("KTS_searchVO") KTS_SampleDefaultVO KTS_searchVO, Model model) throws Exception {
		KTS_SampleVO KTS_sampleVO = new KTS_SampleVO();
		KTS_sampleVO.setId(id);
		// 변수명은 CoC 에 따라 sampleVO
		model.addAttribute(selectSample(KTS_sampleVO, KTS_searchVO));
		return "KTS_sample/KTS_egovSampleRegister";
	}

	/**
	 * 글을 조회한다.
	 * 
	 * @param sampleVO - 조회할 정보가 담긴 VO
	 * @param searchVO - 목록 조회조건 정보가 담긴 VO
	 * @param status
	 * @return @ModelAttribute("sampleVO") - 조회한 정보
	 * @exception Exception
	 */
	public KTS_SampleVO selectSample(KTS_SampleVO KTS_sampleVO,
			@ModelAttribute("KTS_searchVO") KTS_SampleDefaultVO KTS_searchVO) throws Exception {
		return sampleService.selectSample(KTS_sampleVO);
	}

	/**
	 * 글을 수정한다.
	 * 
	 * @param sampleVO - 수정할 정보가 담긴 VO
	 * @param searchVO - 목록 조회조건 정보가 담긴 VO
	 * @param status
	 * @return "forward:/KTS_egovSampleList.do"
	 * @exception Exception
	 */
	@RequestMapping("/updateSample.do")
	public String updateSample(@ModelAttribute("KTS_searchVO") KTS_SampleDefaultVO KTS_searchVO,
			KTS_SampleVO KTS_sampleVO, BindingResult bindingResult, Model model, SessionStatus status)
			throws Exception {

		beanValidator.validate(KTS_sampleVO, bindingResult);

		if (bindingResult.hasErrors()) {
			model.addAttribute("KTS_sampleVO", KTS_sampleVO);
			return "KTS_sample/KTS_egovSampleRegister";
		}

		sampleService.updateSample(KTS_sampleVO);
		status.setComplete();
		return "forward:/KTS_egovSampleList.do";
	}

	/**
	 * 글을 삭제한다.
	 * 
	 * @param sampleVO - 삭제할 정보가 담긴 VO
	 * @param searchVO - 목록 조회조건 정보가 담긴 VO
	 * @param status
	 * @return "forward:/KTS_egovSampleList.do"
	 * @exception Exception
	 */
	@RequestMapping("/deleteSample.do")
	public String deleteSample(KTS_SampleVO KTS_sampleVO,
			@ModelAttribute("KTS_searchVO") KTS_SampleDefaultVO KTS_searchVO, SessionStatus status) throws Exception {
		sampleService.deleteSample(KTS_sampleVO);
		status.setComplete();
		return "forward:/KTS_egovSampleList.do";
	}

	/*
	 * File Download Contorller
	 */
	@GetMapping("/downloadFile.do")
	public ResponseEntity<byte[]> downloadFile(@RequestParam("filename") String fileName) {
		try {
			String decodedFilename = URLDecoder.decode(fileName, "UTF-8");
			String fileDirectory = "C:/uploads"; // 파일이 저장된 폴더 경로
			File file = new File(fileDirectory, decodedFilename);

			if (file.exists()) {
				byte[] fileContent = new byte[(int) file.length()];
				try (FileInputStream inputStream = new FileInputStream(file)) {
					inputStream.read(fileContent);
				}

				HttpHeaders headers = new HttpHeaders();
				headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);

				// URL 인코딩된 파일명을 사용하여 Content-Disposition 헤더 생성
				String encodedFilename = URLEncoder.encode(decodedFilename, "UTF-8");
				headers.setContentDispositionFormData("attachment", encodedFilename);

				return new ResponseEntity<>(fileContent, headers, HttpStatus.OK);
			} else {
				// 파일이 존재하지 않을 경우
				return new ResponseEntity<>(HttpStatus.NOT_FOUND);
			}
		} catch (IOException e) {
			e.printStackTrace();
			// 다운로드 실패 시 이전 화면으로 리다이렉트
			// 이 부분을 해당하는 로직으로 수정해야합니다.
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

}
